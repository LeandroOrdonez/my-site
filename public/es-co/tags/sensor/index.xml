<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sensor on Leandro Ord칩침ez Ante</title>
    <link>http://localhost:1313/es-co/tags/sensor/</link>
    <description>Recent content in Sensor on Leandro Ord칩침ez Ante</description>
    <generator>Hugo</generator>
    <language>es-co</language>
    <lastBuildDate>Sun, 05 Apr 2020 14:10:33 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/es-co/tags/sensor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Interactive querying for spatiotemporal data with Kafka Streams</title>
      <link>http://localhost:1313/es-co/ideas/interactive-querying-kafka-streams/</link>
      <pubDate>Sun, 05 Apr 2020 14:10:33 +0100</pubDate>
      <guid>http://localhost:1313/es-co/ideas/interactive-querying-kafka-streams/</guid>
      <description>Data Pipeline by xkcd.com&#xA;In a previous post we explored a method for performing continuous aggregation on a stream of sensor readings using the Kafka Streams DSL. This time I want to share with you kafka-streams-pipeline, a Kafka Streams application that leverages said continuous aggregation method and defines a complete stream processing pipeline, which enables querying the continuous data summaries stored into a materialized KTable, by incorporating the spatial and temporal dimensions of the sensor data to the analysis.</description>
    </item>
    <item>
      <title>Mocking sensor data generator</title>
      <link>http://localhost:1313/es-co/ideas/mocking-sensor-data-generator/</link>
      <pubDate>Wed, 01 Apr 2020 11:44:42 +0200</pubDate>
      <guid>http://localhost:1313/es-co/ideas/mocking-sensor-data-generator/</guid>
      <description>Photo by Thor Alvis on Unsplash&#xA;In case you are ever in need of some toy data to get you started with a data project, or just to test your ideas or implementations, I think you might find the Docker setup in this repo useful. It allows generating synthetic sensor readings of geolocated temperature data, and posting each record to a Kafka topic. The readings generated follow the format specified in the sample records below:</description>
    </item>
  </channel>
</rss>
