<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aggregation on Leandro Ordóñez Ante</title><link>https://leandro.ordonez.tech/tags/aggregation/</link><description>Recent content in aggregation on Leandro Ordóñez Ante</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 17 Oct 2019 10:45:27 +0200</lastBuildDate><atom:link href="https://leandro.ordonez.tech/tags/aggregation/index.xml" rel="self" type="application/rss+xml"/><item><title>Continuous aggregation in Kafka Streams</title><link>https://leandro.ordonez.tech/ideas/continuous-aggregation-kafka-streams/</link><pubDate>Thu, 17 Oct 2019 10:45:27 +0200</pubDate><guid>https://leandro.ordonez.tech/ideas/continuous-aggregation-kafka-streams/</guid><description>&lt;figure>&lt;img src="https://leandro.ordonez.tech/images/ideas/lago-bolson.jpg"
alt="Lago el Bolsón in Popayán, Colombia, my home town :)"/>&lt;figcaption>
&lt;p>Lago el Bolsón in Popayán, Colombia, my home town :)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>In this post I show a method to address the computation of the arithmetic mean of an stream of values (say sensor readings) using the Kafka Streams DSL. The estimation of the average in a stream processing setting implies keeping track of other two measurements, namely the count of incoming records and the sum of their corresponding values. Let&amp;rsquo;s consider a Kafka streams application consuming messages from a topic to which the readings of multiple temperature sensors are being posted (&lt;code>temperature-readings&lt;/code>). The messages from said topic are keyed by the sensor ID, and we want to compute the rolling average of the temperature sensed by each device.&lt;/p>
&lt;p>Let&amp;rsquo;s first create a &lt;code>KGroupedStream&lt;/code> to group the sensor readings according to their corresponding sensor ID:&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/LeandroOrdonez/aadca09b9aaa41a3b61c41796f3581d1.js?file=KafkaStreamsAggregator_1.java">&lt;/script>
&lt;p>Now we can use the &lt;code>KGroupedStream::aggregate&lt;/code> method to compute the rolling average on the &lt;code>perSensorStream&lt;/code> we got above. But before this, according to the Kafka &lt;a href="https://docs.confluent.io/current/streams/javadocs/org/apache/kafka/streams/kstream/KGroupedStream.html#aggregate-org.apache.kafka.streams.kstream.Initializer-org.apache.kafka.streams.kstream.Aggregator-">documentation&lt;/a> this method requires an &lt;code>Initializer&lt;/code> and an &lt;code>Aggregator&lt;/code> as arguments:&lt;/p>
&lt;blockquote>
&lt;p>The specified &lt;code>Initializer&lt;/code> is applied once directly before the first input record is processed to provide an initial intermediate aggregation result that is used to process the first record. The specified &lt;code>Aggregator&lt;/code> is applied for each input record and computes a new aggregate using the current aggregate (or for the very first record using the intermediate aggregation result provided via the Initializer) and the record&amp;rsquo;s value. Thus, aggregate(Initializer, Aggregator) can be used to compute aggregate functions like count (c.f. count()).&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s create a POJO to provide such initial aggregation and to hold the intermediate aggregation values:&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/LeandroOrdonez/aadca09b9aaa41a3b61c41796f3581d1.js?file=AggregateTuple.java">&lt;/script>
&lt;p>Now we need to provide an implementation of the &lt;code>apply&lt;/code> method for the &lt;code>Aggregator&lt;/code> argument, which would be in charge of computing a new aggregate from the &lt;code>key&lt;/code> and &lt;code>value&lt;/code> of an incoming record and the current &lt;code>aggregate&lt;/code> of the same key:&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/LeandroOrdonez/aadca09b9aaa41a3b61c41796f3581d1.js?file=KafkaStreamsAggregator_2.java">&lt;/script>
&lt;p>We can finally call the &lt;code>aggregate&lt;/code> method on the &lt;code>perSensorStream&lt;/code>:&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/LeandroOrdonez/aadca09b9aaa41a3b61c41796f3581d1.js?file=KafkaStreamsAggregator_3.java">&lt;/script>
&lt;p>Below you can find the relevant code for the aggregation method outlined in this post.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/LeandroOrdonez/aadca09b9aaa41a3b61c41796f3581d1.js?file=KafkaStreamsAggregator.java">&lt;/script>
&lt;p>I didn&amp;rsquo;t include the code for handling serialization in this post, but you can find it here: &lt;a href="https://gist.github.com/LeandroOrdonez/aadca09b9aaa41a3b61c41796f3581d1#file-jsonpojoserializer-java">JsonPOJOSerializer&lt;/a> and &lt;a href="https://gist.github.com/LeandroOrdonez/aadca09b9aaa41a3b61c41796f3581d1#file-jsonpojodeserializer-java">JsonPOJODeserializer&lt;/a>.&lt;/p></description></item></channel></rss>